From 3f185913ad2906effaf8700dddd570b0f0e1115c Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Wed, 13 Nov 2013 19:10:06 +0000
Subject: [PATCH] cross runtime

---
 Makefile                      |  8 ++++++--
 make/config.mk                |  6 +++---
 make/options.mk               | 12 ++++++------
 make/platform/clang_darwin.mk |  4 +++-
 make/platform/darwin_bni.mk   |  2 ++
 5 files changed, 20 insertions(+), 12 deletions(-)

diff --git a/Makefile b/Makefile
index 6747ea4..fc983a1 100644
--- a/Makefile
+++ b/Makefile
@@ -11,6 +11,10 @@ ifdef SRCROOT
   include make/AppleBI.mk
 endif
 
+LEVEL=../..
+
+include $(LEVEL)/Makefile.config
+
 # Make sure we don't build with a missing ProjObjRoot.
 ifeq ($(ProjObjRoot),)
 $(error Refusing to build with empty ProjObjRoot variable)
@@ -211,11 +215,11 @@ $(Tmp.ObjPath)/libcompiler_rt.a: $(Tmp.Inputs) $(Tmp.ObjPath)/.dir
 $(Tmp.ObjPath)/libcompiler_rt.dylib: $(Tmp.Inputs) $(Tmp.ObjPath)/.dir
 	$(Summary) "  DYLIB:   $(Tmp.Name)/$(Tmp.Config)/$(Tmp.Arch): $$@"
 	$(Verb) $(Tmp.CC) -arch $(Tmp.Arch) -dynamiclib -o $$@ \
-	  $(Tmp.Inputs) $(Tmp.LDFLAGS)
+	  $(Tmp.Inputs) $(LDFLAGS) $(Tmp.LDFLAGS)
 $(Tmp.ObjPath)/libcompiler_rt.so: $(Tmp.Inputs) $(Tmp.ObjPath)/.dir
 	$(Summary) "  SO:   $(Tmp.Name)/$(Tmp.Config)/$(Tmp.Arch): $$@"
 	$(Verb) $(Tmp.CC) -shared -o $$@ \
-	  $(Tmp.Inputs) $(Tmp.LDFLAGS)
+	  $(Tmp.Inputs) $(LDFLAGS) $(Tmp.LDFLAGS)
 .PRECIOUS: $(Tmp.ObjPath)/.dir
 
 # Per-Config-Arch Targets
diff --git a/make/config.mk b/make/config.mk
index 6398d05..4cdf165 100644
--- a/make/config.mk
+++ b/make/config.mk
@@ -19,7 +19,7 @@ AlwaysRequiredModules := int_util
 # FIXME: LLVM uses autoconf/mkinstalldirs ?
 MKDIR := mkdir -p
 DATE := date
-LIPO := lipo
+LIPO := $(prefix)/bin/$(TARGET_TRIPLE)-lipo
 CP := cp
 DSYMUTIL := dsymutil
 
@@ -43,5 +43,5 @@ endif
 
 ###
 # Common compiler options
-COMMON_CXXFLAGS=-fno-exceptions -fPIC -funwind-tables -I${ProjSrcRoot}/lib -I${ProjSrcRoot}/include
-COMMON_CFLAGS=-fPIC
+COMMON_CXXFLAGS=-fno-exceptions -fPIC -funwind-tables --sysroot=$(prefix)/$(TARGET_TRIPLE)/sysroot -I${ProjSrcRoot}/lib -I${ProjSrcRoot}/include
+COMMON_CFLAGS=-fPIC --sysroot=$(prefix)/$(TARGET_TRIPLE)/sysroot
diff --git a/make/options.mk b/make/options.mk
index 67197de..bbd58ef 100644
--- a/make/options.mk
+++ b/make/options.mk
@@ -31,18 +31,18 @@ SHARED_LIBRARY := 0
 
 # Miscellaneous tools.
 
-AR := ar
+AR := $(prefix)/bin/$(TARGET_TRIPLE)-ar
 # FIXME: Remove these pipes once ranlib errors are fixed.
 ARFLAGS := cru 2> /dev/null
 
-LDFLAGS :=
+LDFLAGS := -B${prefix}/bin/$(TARGET_TRIPLE)- --sysroot=$(prefix)/$(TARGET_TRIPLE)/sysroot
 
-RANLIB := ranlib
+RANLIB := $(prefix)/bin/$(TARGET_TRIPLE)-ranlib
 # FIXME: Remove these pipes once ranlib errors are fixed.
 RANLIBFLAGS := 2> /dev/null
 
-STRIP := strip
-LIPO := lipo
-DSYMUTIL := dsymutil
+STRIP := $(prefix)/bin/$(TARGET_TRIPLE)-strip
+LIPO := $(prefix)/bin/$(TARGET_TRIPLE)-lipo
+DSYMUTIL := $(prefix)/bin/$(TARGET_TRIPLE)-dsymutil
 
 SHARED_LIBRARY_SUFFIX := so
diff --git a/make/platform/clang_darwin.mk b/make/platform/clang_darwin.mk
index 5f8801c..5d5f3ad 100644
--- a/make/platform/clang_darwin.mk
+++ b/make/platform/clang_darwin.mk
@@ -91,12 +91,14 @@ UniversalArchs.ubsan_osx := $(call CheckArches,i386 x86_64,ubsan_osx)
 # object files. If we are on that platform, strip out all ARM archs. We still
 # build the libraries themselves so that Clang can find them where it expects
 # them, even though they might not have an expected slice.
+ifneq ($(shell which sw_vers),)
 ifneq ($(shell test -x /usr/bin/sw_vers && sw_vers -productVersion | grep 10.6),)
 UniversalArchs.ios := $(filter-out armv7, $(UniversalArchs.ios))
 UniversalArchs.cc_kext := $(filter-out armv7, $(UniversalArchs.cc_kext))
 UniversalArchs.cc_kext_ios5 := $(filter-out armv7, $(UniversalArchs.cc_kext_ios5))
 UniversalArchs.profile_ios := $(filter-out armv7, $(UniversalArchs.profile_ios))
 endif
+endif
 
 # If RC_SUPPORTED_ARCHS is defined, treat it as a list of the architectures we
 # are intended to support and limit what we try to build to that.
@@ -174,7 +176,7 @@ CFLAGS.profile_ios.armv7s := $(CFLAGS) $(IOS_DEPLOYMENT_ARGS)
 
 # Configure the asan_osx_dynamic library to be built shared.
 SHARED_LIBRARY.asan_osx_dynamic := 1
-LDFLAGS.asan_osx_dynamic := -lstdc++ -undefined dynamic_lookup
+LDFLAGS.asan_osx_dynamic :=  -B${prefix}/bin/$(TARGET_TRIPLE)- --sysroot=$(prefix)/$(TARGET_TRIPLE)/sysroot -framework Foundation -L$(prefix)/$(TARGET_TRIPLE)/sysroot/usr/lib/$(TARGET_TRIPLE)/4.2.1/ -lstdc++ -undefined dynamic_lookup
 
 FUNCTIONS.eprintf := eprintf
 FUNCTIONS.10.4 := eprintf floatundidf floatundisf floatundixf
diff --git a/make/platform/darwin_bni.mk b/make/platform/darwin_bni.mk
index 03e8d29..f86b474 100644
--- a/make/platform/darwin_bni.mk
+++ b/make/platform/darwin_bni.mk
@@ -9,6 +9,7 @@ Configs := Debug Release Profile Static
 UniversalArchs := $(RC_ARCHS)
 
 ifneq (,$(SDKROOT))
+ifneq (,$(CROSS_TARGET))
 	override CC := $(shell xcrun -sdk $(SDKROOT) -find clang || echo "false") 
 	AR := $(shell xcrun -sdk $(SDKROOT) -find ar || echo "false") 
 	RANLIB := $(shell xcrun -sdk $(SDKROOT) -find ranlib || echo "false") 
@@ -16,6 +17,7 @@ ifneq (,$(SDKROOT))
 	LIPO := $(shell xcrun -sdk $(SDKROOT) -find lipo || echo "false")
 	DSYMUTIL := $(shell xcrun -sdk $(SDKROOT) -find dsymutil || echo "false")
 endif
+endif
 
 ifneq ($(IPHONEOS_DEPLOYMENT_TARGET),)
 	DEPLOYMENT_FLAGS := -miphoneos-version-min=$(IPHONEOS_DEPLOYMENT_TARGET) 
-- 
1.8.4.2

