From a8a95e6ae23e715554474948311fcc8b7e246e56 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Wed, 13 Nov 2013 18:07:01 +0000
Subject: [PATCH 3/5] prefix program names by triple

---
 include/clang/Driver/Driver.h |  3 +++
 lib/Driver/ToolChain.cpp      | 10 ++++++++++
 tools/driver/driver.cpp       | 13 +++++++++++++
 3 files changed, 26 insertions(+)

diff --git a/include/clang/Driver/Driver.h b/include/clang/Driver/Driver.h
index 867444e..5923163 100644
--- a/include/clang/Driver/Driver.h
+++ b/include/clang/Driver/Driver.h
@@ -75,6 +75,9 @@ public:
   /// command line.
   std::string Dir;
 
+  /// The prefix of the clang executable.
+  std::string Prefix;
+
   /// The original path to the clang executable.
   std::string ClangExecutable;
 
diff --git a/lib/Driver/ToolChain.cpp b/lib/Driver/ToolChain.cpp
index 9fe0379..cb8d25b 100644
--- a/lib/Driver/ToolChain.cpp
+++ b/lib/Driver/ToolChain.cpp
@@ -143,6 +143,16 @@ std::string ToolChain::GetFilePath(const char *Name) const {
 }
 
 std::string ToolChain::GetProgramPath(const char *Name) const {
+  if(getDriver().Prefix != "") {
+    // first try prefixed with Driver::Prefix
+    std::string targetName = getDriver().Prefix;
+    targetName += "-";
+    targetName += Name;
+    std::string targetProgram = D.GetProgramPath(targetName.c_str(), *this);
+    if(targetProgram != targetName) {
+      return targetProgram;
+    }
+  }
   return D.GetProgramPath(Name, *this);
 }
 
diff --git a/tools/driver/driver.cpp b/tools/driver/driver.cpp
index 3a6a09b..81118f9 100644
--- a/tools/driver/driver.cpp
+++ b/tools/driver/driver.cpp
@@ -209,6 +209,11 @@ static void ParseProgName(SmallVectorImpl<const char *> &ArgVector,
   // "x86_64-linux-clang" as interpreted as suffix "clang" with
   // target prefix "x86_64-linux". If such a target prefix is found,
   // is gets added via -target as implicit first argument.
+  // .. with one caveat:
+  // Force i<N>86*darwin* to i386*darwin* as i386 has special meaning there
+  // of "The first Intel CPU that Darwin was available for, i.e. Yonah" while
+  // e.g. i686 means "The next Intel CPU after Pentium, i.e. Pentium Pro".
+
   static const struct {
     const char *Suffix;
     const char *ModeFlag;
@@ -262,9 +267,17 @@ static void ParseProgName(SmallVectorImpl<const char *> &ArgVector,
     ProgNameRef = ProgNameRef.slice(0, LastComponent);
   }
 
+  TheDriver.Prefix = Prefix;
+
   if (Prefix.empty())
     return;
 
+  // Force i<N>86*darwin* to i386*darwin* (see above for reason)
+  if (ProgName.find("darwin") != std::string::npos &&
+      ProgName[0] == 'i' && isdigit(ProgName[1]) &&
+      ProgName[2] == '8' && ProgName[3] == '6')
+    ProgName[1] = '3';
+
   std::string IgnoredError;
   if (llvm::TargetRegistry::lookupTarget(Prefix, IgnoredError)) {
     SmallVectorImpl<const char *>::iterator it = ArgVector.begin();
-- 
1.8.5.rc2

